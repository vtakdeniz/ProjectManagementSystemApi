// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectManagementSystem.Data;

namespace ProjectManagementSystem.Migrations
{
    [DbContext(typeof(ManagementContext))]
    [Migration("20220305120301_AddedNotification")]
    partial class AddedNotification
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ProjectManagementSystem.Models.JobElements.ActivityHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<int>("job_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("job_id");

                    b.ToTable("activityHistories");
                });

            modelBuilder.Entity("ProjectManagementSystem.Models.JobElements.Attachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("job_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("job_id");

                    b.ToTable("attachments");
                });

            modelBuilder.Entity("ProjectManagementSystem.Models.JobElements.CheckList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("isSelected")
                        .HasColumnType("bit");

                    b.Property<int>("job_id")
                        .HasColumnType("int");

                    b.Property<string>("text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("job_id");

                    b.ToTable("checkLists");
                });

            modelBuilder.Entity("ProjectManagementSystem.Models.JobElements.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("createUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("endDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isFinished")
                        .HasColumnType("bit");

                    b.Property<string>("jobDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("jobTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("project_id")
                        .HasColumnType("int");

                    b.Property<string>("receiverUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("section_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("startDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("createUserId");

                    b.HasIndex("project_id");

                    b.HasIndex("receiverUserId");

                    b.HasIndex("section_id");

                    b.ToTable("jobs");
                });

            modelBuilder.Entity("ProjectManagementSystem.Models.JobElements.Tags", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("job_id")
                        .HasColumnType("int");

                    b.Property<string>("tagName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("job_id");

                    b.ToTable("tags");
                });

            modelBuilder.Entity("ProjectManagementSystem.Models.ProjectElements.Board", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("endDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isFinished")
                        .HasColumnType("bit");

                    b.Property<int?>("projectId")
                        .HasColumnType("int");

                    b.Property<int>("project_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("startDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("projectId");

                    b.ToTable("boards");
                });

            modelBuilder.Entity("ProjectManagementSystem.Models.ProjectElements.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("endDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isFinished")
                        .HasColumnType("bit");

                    b.Property<string>("projectDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("projectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("startDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("projects");
                });

            modelBuilder.Entity("ProjectManagementSystem.Models.ProjectElements.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("board_id")
                        .HasColumnType("int");

                    b.Property<string>("sectionName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("board_id");

                    b.ToTable("sections");
                });

            modelBuilder.Entity("ProjectManagementSystem.Models.ProjectElements.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("project_id")
                        .HasColumnType("int");

                    b.Property<string>("teamName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("project_id");

                    b.ToTable("teams");
                });

            modelBuilder.Entity("ProjectManagementSystem.Models.RelationTables.BoardHasAdmins", b =>
                {
                    b.Property<int>("board_id")
                        .HasColumnType("int");

                    b.Property<string>("user_id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("board_id", "user_id");

                    b.HasIndex("user_id");

                    b.ToTable("boardHasAdmins");
                });

            modelBuilder.Entity("ProjectManagementSystem.Models.RelationTables.BoardHasTeams", b =>
                {
                    b.Property<int>("board_id")
                        .HasColumnType("int");

                    b.Property<int>("team_id")
                        .HasColumnType("int");

                    b.HasKey("board_id", "team_id");

                    b.HasIndex("team_id");

                    b.ToTable("boardHasTeams");
                });

            modelBuilder.Entity("ProjectManagementSystem.Models.RelationTables.BoardHasUsers", b =>
                {
                    b.Property<string>("user_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("board_id")
                        .HasColumnType("int");

                    b.HasKey("user_id", "board_id");

                    b.HasIndex("board_id");

                    b.ToTable("boardHasUsers");
                });

            modelBuilder.Entity("ProjectManagementSystem.Models.RelationTables.JobHasUsers", b =>
                {
                    b.Property<string>("user_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("job_id")
                        .HasColumnType("int");

                    b.HasKey("user_id", "job_id");

                    b.HasIndex("job_id");

                    b.ToTable("taskHasUsers");
                });

            modelBuilder.Entity("ProjectManagementSystem.Models.RelationTables.TeamHasUsers", b =>
                {
                    b.Property<int>("team_id")
                        .HasColumnType("int");

                    b.Property<string>("user_id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("team_id", "user_id");

                    b.HasIndex("user_id");

                    b.ToTable("teamHasUsers");
                });

            modelBuilder.Entity("ProjectManagementSystem.Models.RelationTables.UserAssignedProjects", b =>
                {
                    b.Property<string>("receiver_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("project_id")
                        .HasColumnType("int");

                    b.Property<string>("assigner_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("receiver_id", "project_id");

                    b.HasIndex("assigner_id");

                    b.HasIndex("project_id");

                    b.ToTable("userAssignedProjects");
                });

            modelBuilder.Entity("ProjectManagementSystem.Models.RelationTables.UserHasProjects", b =>
                {
                    b.Property<string>("user_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("project_id")
                        .HasColumnType("int");

                    b.HasKey("user_id", "project_id");

                    b.HasIndex("project_id");

                    b.ToTable("userHasProjects");
                });

            modelBuilder.Entity("ProjectManagementSystem.Models.UserElements.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("action_type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("jobId")
                        .HasColumnType("int");

                    b.Property<int>("job_id")
                        .HasColumnType("int");

                    b.Property<string>("owner_user_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("projectId")
                        .HasColumnType("int");

                    b.Property<int>("project_id")
                        .HasColumnType("int");

                    b.Property<string>("sender_userId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("sender_user_id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("target")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("jobId");

                    b.HasIndex("owner_user_id");

                    b.HasIndex("projectId");

                    b.HasIndex("sender_userId");

                    b.ToTable("notifications");
                });

            modelBuilder.Entity("ProjectManagementSystem.Models.UserElements.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ProjectManagementSystem.Models.UserElements.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ProjectManagementSystem.Models.UserElements.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagementSystem.Models.UserElements.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ProjectManagementSystem.Models.UserElements.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectManagementSystem.Models.JobElements.ActivityHistory", b =>
                {
                    b.HasOne("ProjectManagementSystem.Models.JobElements.Job", "job")
                        .WithMany("activityHistories")
                        .HasForeignKey("job_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("job");
                });

            modelBuilder.Entity("ProjectManagementSystem.Models.JobElements.Attachment", b =>
                {
                    b.HasOne("ProjectManagementSystem.Models.JobElements.Job", "job")
                        .WithMany("attachments")
                        .HasForeignKey("job_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("job");
                });

            modelBuilder.Entity("ProjectManagementSystem.Models.JobElements.CheckList", b =>
                {
                    b.HasOne("ProjectManagementSystem.Models.JobElements.Job", "job")
                        .WithMany("checkLists")
                        .HasForeignKey("job_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("job");
                });

            modelBuilder.Entity("ProjectManagementSystem.Models.JobElements.Job", b =>
                {
                    b.HasOne("ProjectManagementSystem.Models.UserElements.User", "createUser")
                        .WithMany("userCreatedJobs")
                        .HasForeignKey("createUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagementSystem.Models.ProjectElements.Project", "project")
                        .WithMany("projectJobs")
                        .HasForeignKey("project_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagementSystem.Models.UserElements.User", "receiverUser")
                        .WithMany("userReceivedJobs")
                        .HasForeignKey("receiverUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ProjectManagementSystem.Models.ProjectElements.Section", "section")
                        .WithMany("jobs")
                        .HasForeignKey("section_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("createUser");

                    b.Navigation("project");

                    b.Navigation("receiverUser");

                    b.Navigation("section");
                });

            modelBuilder.Entity("ProjectManagementSystem.Models.JobElements.Tags", b =>
                {
                    b.HasOne("ProjectManagementSystem.Models.JobElements.Job", "job")
                        .WithMany("tags")
                        .HasForeignKey("job_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("job");
                });

            modelBuilder.Entity("ProjectManagementSystem.Models.ProjectElements.Board", b =>
                {
                    b.HasOne("ProjectManagementSystem.Models.ProjectElements.Project", "project")
                        .WithMany("boards")
                        .HasForeignKey("projectId");

                    b.Navigation("project");
                });

            modelBuilder.Entity("ProjectManagementSystem.Models.ProjectElements.Section", b =>
                {
                    b.HasOne("ProjectManagementSystem.Models.ProjectElements.Board", "board")
                        .WithMany("sections")
                        .HasForeignKey("board_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("board");
                });

            modelBuilder.Entity("ProjectManagementSystem.Models.ProjectElements.Team", b =>
                {
                    b.HasOne("ProjectManagementSystem.Models.ProjectElements.Project", "project")
                        .WithMany("teams")
                        .HasForeignKey("project_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("project");
                });

            modelBuilder.Entity("ProjectManagementSystem.Models.RelationTables.BoardHasAdmins", b =>
                {
                    b.HasOne("ProjectManagementSystem.Models.ProjectElements.Board", "board")
                        .WithMany("boardHasAdmins")
                        .HasForeignKey("board_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ProjectManagementSystem.Models.UserElements.User", "user")
                        .WithMany("boardHasAdmins")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("board");

                    b.Navigation("user");
                });

            modelBuilder.Entity("ProjectManagementSystem.Models.RelationTables.BoardHasTeams", b =>
                {
                    b.HasOne("ProjectManagementSystem.Models.ProjectElements.Board", "board")
                        .WithMany("boardHasTeams")
                        .HasForeignKey("board_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ProjectManagementSystem.Models.ProjectElements.Team", "team")
                        .WithMany("boardHasTeams")
                        .HasForeignKey("team_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("board");

                    b.Navigation("team");
                });

            modelBuilder.Entity("ProjectManagementSystem.Models.RelationTables.BoardHasUsers", b =>
                {
                    b.HasOne("ProjectManagementSystem.Models.ProjectElements.Board", "board")
                        .WithMany("boardHasUsers")
                        .HasForeignKey("board_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ProjectManagementSystem.Models.UserElements.User", "user")
                        .WithMany("boardHasUsers")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("board");

                    b.Navigation("user");
                });

            modelBuilder.Entity("ProjectManagementSystem.Models.RelationTables.JobHasUsers", b =>
                {
                    b.HasOne("ProjectManagementSystem.Models.JobElements.Job", "job")
                        .WithMany("jobHasUsers")
                        .HasForeignKey("job_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ProjectManagementSystem.Models.UserElements.User", "user")
                        .WithMany("jobHasUsers")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("job");

                    b.Navigation("user");
                });

            modelBuilder.Entity("ProjectManagementSystem.Models.RelationTables.TeamHasUsers", b =>
                {
                    b.HasOne("ProjectManagementSystem.Models.ProjectElements.Team", "team")
                        .WithMany("teamHasUsers")
                        .HasForeignKey("team_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ProjectManagementSystem.Models.UserElements.User", "user")
                        .WithMany("teamHasUsers")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("team");

                    b.Navigation("user");
                });

            modelBuilder.Entity("ProjectManagementSystem.Models.RelationTables.UserAssignedProjects", b =>
                {
                    b.HasOne("ProjectManagementSystem.Models.UserElements.User", "assignerUser")
                        .WithMany("assignedByUser")
                        .HasForeignKey("assigner_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ProjectManagementSystem.Models.ProjectElements.Project", "project")
                        .WithMany("userAssignedProjects")
                        .HasForeignKey("project_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ProjectManagementSystem.Models.UserElements.User", "receiverUser")
                        .WithMany("userAssignedProjects")
                        .HasForeignKey("receiver_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("assignerUser");

                    b.Navigation("project");

                    b.Navigation("receiverUser");
                });

            modelBuilder.Entity("ProjectManagementSystem.Models.RelationTables.UserHasProjects", b =>
                {
                    b.HasOne("ProjectManagementSystem.Models.ProjectElements.Project", "project")
                        .WithMany("userHasProjects")
                        .HasForeignKey("project_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagementSystem.Models.UserElements.User", "user")
                        .WithMany("userHasProjects")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("project");

                    b.Navigation("user");
                });

            modelBuilder.Entity("ProjectManagementSystem.Models.UserElements.Notification", b =>
                {
                    b.HasOne("ProjectManagementSystem.Models.JobElements.Job", "job")
                        .WithMany()
                        .HasForeignKey("jobId");

                    b.HasOne("ProjectManagementSystem.Models.UserElements.User", "owner_user")
                        .WithMany("notifications")
                        .HasForeignKey("owner_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagementSystem.Models.ProjectElements.Project", "project")
                        .WithMany()
                        .HasForeignKey("projectId");

                    b.HasOne("ProjectManagementSystem.Models.UserElements.User", "sender_user")
                        .WithMany()
                        .HasForeignKey("sender_userId");

                    b.Navigation("job");

                    b.Navigation("owner_user");

                    b.Navigation("project");

                    b.Navigation("sender_user");
                });

            modelBuilder.Entity("ProjectManagementSystem.Models.JobElements.Job", b =>
                {
                    b.Navigation("activityHistories");

                    b.Navigation("attachments");

                    b.Navigation("checkLists");

                    b.Navigation("jobHasUsers");

                    b.Navigation("tags");
                });

            modelBuilder.Entity("ProjectManagementSystem.Models.ProjectElements.Board", b =>
                {
                    b.Navigation("boardHasAdmins");

                    b.Navigation("boardHasTeams");

                    b.Navigation("boardHasUsers");

                    b.Navigation("sections");
                });

            modelBuilder.Entity("ProjectManagementSystem.Models.ProjectElements.Project", b =>
                {
                    b.Navigation("boards");

                    b.Navigation("projectJobs");

                    b.Navigation("teams");

                    b.Navigation("userAssignedProjects");

                    b.Navigation("userHasProjects");
                });

            modelBuilder.Entity("ProjectManagementSystem.Models.ProjectElements.Section", b =>
                {
                    b.Navigation("jobs");
                });

            modelBuilder.Entity("ProjectManagementSystem.Models.ProjectElements.Team", b =>
                {
                    b.Navigation("boardHasTeams");

                    b.Navigation("teamHasUsers");
                });

            modelBuilder.Entity("ProjectManagementSystem.Models.UserElements.User", b =>
                {
                    b.Navigation("assignedByUser");

                    b.Navigation("boardHasAdmins");

                    b.Navigation("boardHasUsers");

                    b.Navigation("jobHasUsers");

                    b.Navigation("notifications");

                    b.Navigation("teamHasUsers");

                    b.Navigation("userAssignedProjects");

                    b.Navigation("userCreatedJobs");

                    b.Navigation("userHasProjects");

                    b.Navigation("userReceivedJobs");
                });
#pragma warning restore 612, 618
        }
    }
}
